(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{229:function(a,t,r){"use strict";r.r(t);var s=r(17),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("** 前两章用翻译软件进行翻译，感觉太难看懂，从这章起，不再直译，将以笔记的方式来记录**")]),a._v(" "),r("h2",{attrs:{id:"语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),r("p",[a._v("ECMAScript的语法大量借鉴了C和其它类C语言的语法，如Java和Perel. 熟悉此类语言的开发人员可以轻松的掌握 ECMAScript 较为宽松的语法。")]),a._v(" "),r("h3",{attrs:{id:"大小写敏感"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#大小写敏感"}},[a._v("#")]),a._v(" 大小写敏感")]),a._v(" "),r("p",[a._v('需要理解的第一个概念是，ECMAScript所有内容都区分大小写，变量名，函数名和运算符均区分大小写。这意味着“test”和“Test”是不同的变量名。同样,"typeof" 不能作为函数名，因为它是关键字，虽然"typeof"是一个完全有效的函数名。')]),a._v(" "),r("h3",{attrs:{id:"标识符"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[a._v("#")]),a._v(" 标识符")]),a._v(" "),r("p",[a._v("标识符是变量名、函数、属性或函数的参数名。")]),a._v(" "),r("h3",{attrs:{id:"注释"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),r("h3",{attrs:{id:"严格模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#严格模式"}},[a._v("#")]),a._v(" 严格模式")]),a._v(" "),r("h3",{attrs:{id:"声明-语句"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#声明-语句"}},[a._v("#")]),a._v(" 声明 语句")]),a._v(" "),r("h2",{attrs:{id:"关键词和保留字"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键词和保留字"}},[a._v("#")]),a._v(" 关键词和保留字")]),a._v(" "),r("h2",{attrs:{id:"变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),r("h3",{attrs:{id:"var-关键字"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#var-关键字"}},[a._v("#")]),a._v(" var 关键字")]),a._v(" "),r("h4",{attrs:{id:"var-声明范围"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#var-声明范围"}},[a._v("#")]),a._v(" var 声明范围")]),a._v(" "),r("h4",{attrs:{id:"var-声明提升"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#var-声明提升"}},[a._v("#")]),a._v(" var 声明提升")]),a._v(" "),r("h3",{attrs:{id:"let-声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#let-声明"}},[a._v("#")]),a._v(" let 声明")]),a._v(" "),r("h4",{attrs:{id:"暂时性死区（temporal-dead-zone）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区（temporal-dead-zone）"}},[a._v("#")]),a._v(" 暂时性死区（Temporal Dead Zone）")]),a._v(" "),r("h4",{attrs:{id:"全局声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#全局声明"}},[a._v("#")]),a._v(" 全局声明")]),a._v(" "),r("h4",{attrs:{id:"条件声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#条件声明"}},[a._v("#")]),a._v(" 条件声明")]),a._v(" "),r("h4",{attrs:{id:"for-循环中的-let-声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#for-循环中的-let-声明"}},[a._v("#")]),a._v(" for 循环中的 let 声明")]),a._v(" "),r("h3",{attrs:{id:"const-声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#const-声明"}},[a._v("#")]),a._v(" const 声明")]),a._v(" "),r("h3",{attrs:{id:"声明样式和最佳实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#声明样式和最佳实践"}},[a._v("#")]),a._v(" 声明样式和最佳实践")]),a._v(" "),r("h4",{attrs:{id:"不要使用-var"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不要使用-var"}},[a._v("#")]),a._v(" 不要使用 var")]),a._v(" "),r("h4",{attrs:{id:"const-比-var-更好"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#const-比-var-更好"}},[a._v("#")]),a._v(" const 比 var 更好")]),a._v(" "),r("h2",{attrs:{id:"数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")])])}),[],!1,null,null,null);t.default=e.exports}}]);