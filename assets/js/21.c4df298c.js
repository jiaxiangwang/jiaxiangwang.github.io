(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{226:function(v,t,r){"use strict";r.r(t);var i=r(17),a=Object(i.a)({},(function(){var v=this,t=v.$createElement,r=v._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h1",{attrs:{id:"这本书的结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#这本书的结构"}},[v._v("#")]),v._v(" 这本书的结构")]),v._v(" "),r("p",[v._v("本书是Professional Javascript for Web Delopers, 4th Edition的翻译，包括以下章节：")]),v._v(" "),r("ol",[r("li",[r("p",[r("strong",[v._v("JavaScript 是什么？")]),v._v(" -- 解释 JavaScript 的起源: 它从何而来，是如何演变的，如今是什么样的。引入的概念包括JavaScript和ECMAScript之间的关系，文档对象模型（DOM）和浏览器对象模型（BOM）。 还包括对欧洲计算机制造商协会（ECMA）和万维网联盟（W3C）有关标准的讨论。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("HTML 中的 Javascript")]),v._v(" -- 实验如何将 JavaScript 和 HTML 结合起来创建动态的web页面。介绍了将JavaScript嵌入页面的各种方式，并包括有关JavaScript内容类型及其与"),r("code",[v._v("<script>")]),v._v("元素的关系的讨论。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("语言基础")]),v._v(" -- 介绍基本的语言概念，包括语法和流控制语句。 解释 JavaScript 和其他基于C的语言在语法上的相似之处，并指出它们之前的差异。 引入了强制类型转换，因为它与内置运算符有关。 涵盖所有语言的原始类型，包括Symbol类型。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("变量，作用域和内存")]),v._v(" -- 由于 JavaScript 变量是弱类型的特点，探讨了如何在 JavaScript 中处理变量。还讨论了原始值和引用值之间的差异，以及与变量相关的执行上下文的信息。另外，关于JavaScript 中的垃圾回收还讨论了当变量超出作用域时如何回收内存。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("基本引用类型")]),v._v(" -- 涵盖有关 JavaScript 内置引用类型的所有详细信息，例如Date，Regexp，基本类型(primitives)和基本类型包装(primitive wrappers)。 每种参考类型都在理论上以及它们与浏览器实现之间的关系方面进行了讨论。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("集合引用类型")]),v._v(" -- 使用Object、Array、Map、WeakMap、Set和WeakSet继续本书对内置引用类型的介绍。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("迭代器和生成器")]),v._v(" -- 在最新版本的 ECMAScript 中引入了两个新的基本概念：迭代器和生成器。 讨论了每种语言的最基本行为以及如何将其与现有语言结构结合使用。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("对象，类和面向对象的编程")]),v._v(" -- 介绍如何在 JavaScript 中使用类和面向对象的编程。 首先深入讨论 JavaScript 对象类型，然后继续介绍原型继承。 接下来是对ES6类的完整讨论，以及它们如何与原型继承密切相关。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("Proxies and Reflect")]),v._v(" -- 引入了两个紧密相关的概念：Proxy和Reflect API，它们可用于拦截其他行为并将其填充到语言的基本操作中。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("函数(Functions)")]),v._v(" -- 探索 JavaScript 最强大的方面之一：函数表达式。主题包括闭包、this对象、模块模式(module pattern)、创建私有对象成员、箭头函数、默认参数和扩展运算符(spread operators)。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("Promises 和异步编程")]),v._v(" -- 引入了两个紧密相关的新异步编程结构：Promise 类型和async/await。 本章首先讨论异步JavaScript范式，然后继续介绍如何使用promise及其与异步函数的关系。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("浏览器对象模型")]),v._v(" -- 介绍浏览器对象模型（BOM），它负责与浏览器本身进行交互。 包括每一个BOM对象，如window, document, location, navigator, 和 screen。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("客户端检测")]),v._v(" -- 介绍检测客户端类型及具备的功能的各种方法。 包括能力检测和‘user-agent’字符串检测的不同的方式。 本章介绍了每种方法的利弊，以及实用性场景。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("文档对象模型")]),v._v(" -- 介绍 JavaScript 中可用的文档对象模型（DOM）对象，如DOM Level 1中定义的那样。简要介绍XML及其与DOM的关系，有助于深入探讨整个DOM以及它如何允许开发人员操作页面。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("DOM扩展")]),v._v(" -- 说明其他API以及浏览器本身如何通过更多功能扩展DOM。 主题包括Selectors API，Element Traversal API和HTML5扩展")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("DOM级别2和3")]),v._v(" -- 在前两章的基础上，解释了DOM级别2和3如何通过其他属性，方法和对象来增强DOM。 包括DOM4添加项，例如突变观察器（mutation observers）。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("事件")]),v._v(" -- 解释 JavaScript 中事件的性质、事件的起源以及DOM如何重新定义事件的工作方式。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("Animation and Graphics with Canvas")]),v._v(" -- 讨论"),r("code",[v._v("<canvas>")]),v._v("标记以及如何使用它创建动态图形。 涵盖了2D上下文和WebGL（3D）上下文，为您提供创建动画和游戏的良好起点。 包括WebGL1和WebGL2的内容。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("脚本表单(Scripting Forms)")]),v._v(" -- 探索如何使用JavaScript增强表单交互并解决浏览器限制。讨论的重点是单个表单元素，如文本框和选择框，以及数据验证和操作。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("JavaScript APIs")]),v._v(" -- 涵盖各种JavaScript API, 包括 Atomics, Encoding, File, Blob, Notifications, Streams, Timing, Web Components, 和 Web Cryptography.")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("错误处理和调试")]),v._v(" -- 讨论浏览器如何处理 JavaScript 代码中的错误，并提供几种处理错误的方法。 还针对每种浏览器讨论了调试工具和技术，包括简化调试过程的建议。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("JavaScript 中的 XML")]),v._v(" -- 介绍用于读取和操作可扩展标记语言（XML）数据的 JavaScript 的功能。 解释了各种 Web 浏览器在支持和对象方面的差异，并提出了一些建议，以简化跨浏览器的编码。 本章还介绍了使用可扩展样式表语言转换（XSLT）来转换客户端上的XML数据。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("JSON")]),v._v(" -- 介绍JSON数据格式，以替代XML。 讨论使用JSON时浏览器的JSON解析和序列化以及安全性注意事项。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("网络请求和远程资源")]),v._v(" -- 探索浏览器请求数据和资源的所有最常见方式。包括传统XMLHttpRequest和现代Fetch API的覆盖范围。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("客户端存储")]),v._v(" -- 讨论如何检测应用程序何时脱机，并提供了各种技术在客户端计算机上存储数据。 首先讨论最受支持的功能cookie，然后讨论诸如Web Storage和IndexedDB的较新功能。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("模块(Modules)")]),v._v(" -- 讨论模块模式及其对代码库的影响。 在此之后，本章介绍了ES6之前的模块加载程序，例如CommonJS，AMD和UMD。 最后详细介绍了新的ES6模块模式以及如何正确使用它。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("Workers")]),v._v(" -- 深入涵盖 workers，shared workers和service workers。 包括讨论 worker 在操作系统和浏览器级别上的行为方式，以及如何最佳使用各种类型的 worker 的策略。")])]),v._v(" "),r("li",[r("p",[r("strong",[v._v("最佳实践")]),v._v(" -- 探索在企业环境中使用JavaScript的方法。 讨论了具有更好可维护性的技术，包括编码技术，格式设置和常规编程实践。 本章还介绍了执行性能，并介绍了一些用于速度优化的技术。 最后，本章介绍了部署问题，包括如何创建构建过程。")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);